Prompt : What happens when you initialize a repository? Why do you need to do it?

A .git file is created. 
We need to do this so that we can begin to use git on that repository. 
This .git file stores our log.



Prompt : How is the staging area different from the working directory and the repository? What value do you think it offers?

A staging area is a sort of a buffer. It keeps track of the files to be added to a commit. 
A repository is a collection of files being tracked by git, while a wd contains all the files. 
If we don't need to add all the files in a single commit, we can add only the required files to the staging area, which are then committed. 



Prompt : How can you use the staging area to make sure you have one commit per logical change?

I can change a file, add it to the staging area, and then commit the staging area.
Since, the other changes were not added to the staging area, they won't be committed. 



Prompt : What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be mostly useful when multiple people are working on different parts of a project, and they can make the changes like they want to, without affecting the original project. 



Prompt : How do the diagrams help you visualize the branch 
structure?

Visual representation makes it easier to visualise the structure.
Also, clearly shows all the branches and clears doubts regarding reachability. 



Prompt : What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of merging two branches is that the code gets merged. 
This allows the changes to be made. 



Prompt : What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic saves tedious labour. 
Manual allows more flexibility. 